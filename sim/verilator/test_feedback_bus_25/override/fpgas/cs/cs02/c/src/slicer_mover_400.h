// Total Subcarrier #: 400








//   Bins:
// 00 (00): []
// 01 (50): [1, 17, 33, 49, 65, 81, 97, 113, 129, 145, 161, 177, 193, 209, 225, 241, 257, 273, 289, 305, 321, 337, 353, 369, 385, 625, 641, 657, 673, 689, 705, 721, 737, 753, 769, 785, 801, 817, 833, 849, 865, 881, 897, 913, 929, 945, 961, 977, 993, 1009]
// 02 (00): []
// 03 (50): [3, 19, 35, 51, 67, 83, 99, 115, 131, 147, 163, 179, 195, 211, 227, 243, 259, 275, 291, 307, 323, 339, 355, 371, 387, 627, 643, 659, 675, 691, 707, 723, 739, 755, 771, 787, 803, 819, 835, 851, 867, 883, 899, 915, 931, 947, 963, 979, 995, 1011]
// 04 (00): []
// 05 (50): [5, 21, 37, 53, 69, 85, 101, 117, 133, 149, 165, 181, 197, 213, 229, 245, 261, 277, 293, 309, 325, 341, 357, 373, 389, 629, 645, 661, 677, 693, 709, 725, 741, 757, 773, 789, 805, 821, 837, 853, 869, 885, 901, 917, 933, 949, 965, 981, 997, 1013]
// 06 (00): []
// 07 (50): [7, 23, 39, 55, 71, 87, 103, 119, 135, 151, 167, 183, 199, 215, 231, 247, 263, 279, 295, 311, 327, 343, 359, 375, 391, 631, 647, 663, 679, 695, 711, 727, 743, 759, 775, 791, 807, 823, 839, 855, 871, 887, 903, 919, 935, 951, 967, 983, 999, 1015]
// 08 (00): []
// 09 (50): [9, 25, 41, 57, 73, 89, 105, 121, 137, 153, 169, 185, 201, 217, 233, 249, 265, 281, 297, 313, 329, 345, 361, 377, 393, 633, 649, 665, 681, 697, 713, 729, 745, 761, 777, 793, 809, 825, 841, 857, 873, 889, 905, 921, 937, 953, 969, 985, 1001, 1017]
// 10 (00): []
// 11 (50): [11, 27, 43, 59, 75, 91, 107, 123, 139, 155, 171, 187, 203, 219, 235, 251, 267, 283, 299, 315, 331, 347, 363, 379, 395, 635, 651, 667, 683, 699, 715, 731, 747, 763, 779, 795, 811, 827, 843, 859, 875, 891, 907, 923, 939, 955, 971, 987, 1003, 1019]
// 12 (00): []
// 13 (50): [13, 29, 45, 61, 77, 93, 109, 125, 141, 157, 173, 189, 205, 221, 237, 253, 269, 285, 301, 317, 333, 349, 365, 381, 397, 637, 653, 669, 685, 701, 717, 733, 749, 765, 781, 797, 813, 829, 845, 861, 877, 893, 909, 925, 941, 957, 973, 989, 1005, 1021]
// 14 (00): []
// 15 (50): [15, 31, 47, 63, 79, 95, 111, 127, 143, 159, 175, 191, 207, 223, 239, 255, 271, 287, 303, 319, 335, 351, 367, 383, 399, 639, 655, 671, 687, 703, 719, 735, 751, 767, 783, 799, 815, 831, 847, 863, 879, 895, 911, 927, 943, 959, 975, 991, 1007, 1023]
// Longest bin: 50

// Schedule usage
// 00: 50.00 %
// 01: 50.00 %
// 02: 50.00 %
// 03: 50.00 %
// 04: 50.00 %
// 05: 50.00 %
// 06: 50.00 %
// 07: 50.00 %
// 08: 50.00 %
// 09: 50.00 %
// 10: 50.00 %
// 11: 50.00 %
// 12: 50.00 %
// 13: 50.00 %
// 14: 50.00 %
// 15: 50.00 %
// 16: 50.00 %
// 17: 50.00 %
// 18: 50.00 %
// 19: 50.00 %
// 20: 50.00 %
// 21: 50.00 %
// 22: 50.00 %
// 23: 50.00 %
// 24: 50.00 %
// 25: 50.00 %
// 26: 50.00 %
// 27: 50.00 %
// 28: 50.00 %
// 29: 50.00 %
// 30: 50.00 %
// 31: 50.00 %
// 32: 50.00 %
// 33: 50.00 %
// 34: 50.00 %
// 35: 50.00 %
// 36: 50.00 %
// 37: 50.00 %
// 38: 50.00 %
// 39: 50.00 %
// 40: 50.00 %
// 41: 50.00 %
// 42: 50.00 %
// 43: 50.00 %
// 44: 50.00 %
// 45: 50.00 %
// 46: 50.00 %
// 47: 50.00 %
// 48: 50.00 %
// 49: 50.00 %











//////////////////////////////////////////////////////////////////////////////////////////////////
//
//     Reverse  Schedule
//
//////////////////////////////////////////////////////////////////////////////////////////////////
//
// Total Subcarriers: [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325, 327, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 377, 379, 381, 383, 385, 387, 389, 391, 393, 395, 397, 399, 625, 627, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 663, 665, 667, 669, 671, 673, 675, 677, 679, 681, 683, 685, 687, 689, 691, 693, 695, 697, 699, 701, 703, 705, 707, 709, 711, 713, 715, 717, 719, 721, 723, 725, 727, 729, 731, 733, 735, 737, 739, 741, 743, 745, 747, 749, 751, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 811, 813, 815, 817, 819, 821, 823, 825, 827, 829, 831, 833, 835, 837, 839, 841, 843, 845, 847, 849, 851, 853, 855, 857, 859, 861, 863, 865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951, 953, 955, 957, 959, 961, 963, 965, 967, 969, 971, 973, 975, 977, 979, 981, 983, 985, 987, 989, 991, 993, 995, 997, 999, 1001, 1003, 1005, 1007, 1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023]
// input_stride = 25
// output_stride = 64
//
// global constants:
enabled_subcarriers_data = 400;
number_active_schedules_data = 50;

// Reverse for chunk(0): [1, 3, 5, 7, 9, 11, 13, 15]
//                       [1, 3, 5, 7, 9, 11, 13, 15]
vmem_schedules[0+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0, SRC_ROW_REV+0 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 0), (0x2 << 12) | (DST_ROW_REV2 + 0), (0x3 << 12) | (DST_ROW_REV2 + 0), (0x4 << 12) | (DST_ROW_REV2 + 0), (0x5 << 12) | (DST_ROW_REV2 + 0), (0x6 << 12) | (DST_ROW_REV2 + 0), (0x7 << 12) | (DST_ROW_REV2 + 0), (0x8 << 12) | (DST_ROW_REV2 + 0), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(1): [17, 19, 21, 23, 25, 27, 29, 31]
//                       [17, 19, 21, 23, 25, 27, 29, 31]
vmem_schedules[1+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1, SRC_ROW_REV+0, SRC_ROW_REV+1 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 0), (0xa << 12) | (DST_ROW_REV2 + 0), (0xb << 12) | (DST_ROW_REV2 + 0), (0xc << 12) | (DST_ROW_REV2 + 0), (0xd << 12) | (DST_ROW_REV2 + 0), (0xe << 12) | (DST_ROW_REV2 + 0), (0xf << 12) | (DST_ROW_REV2 + 0), (0x10 << 12) | (DST_ROW_REV2 + 0) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(2): [33, 35, 37, 39, 41, 43, 45, 47]
//                       [33, 35, 37, 39, 41, 43, 45, 47]
vmem_schedules[2+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2, SRC_ROW_REV+0, SRC_ROW_REV+2 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 1), (0x2 << 12) | (DST_ROW_REV2 + 1), (0x3 << 12) | (DST_ROW_REV2 + 1), (0x4 << 12) | (DST_ROW_REV2 + 1), (0x5 << 12) | (DST_ROW_REV2 + 1), (0x6 << 12) | (DST_ROW_REV2 + 1), (0x7 << 12) | (DST_ROW_REV2 + 1), (0x8 << 12) | (DST_ROW_REV2 + 1), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(3): [49, 51, 53, 55, 57, 59, 61, 63]
//                       [49, 51, 53, 55, 57, 59, 61, 63]
vmem_schedules[3+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3, SRC_ROW_REV+0, SRC_ROW_REV+3 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 1), (0xa << 12) | (DST_ROW_REV2 + 1), (0xb << 12) | (DST_ROW_REV2 + 1), (0xc << 12) | (DST_ROW_REV2 + 1), (0xd << 12) | (DST_ROW_REV2 + 1), (0xe << 12) | (DST_ROW_REV2 + 1), (0xf << 12) | (DST_ROW_REV2 + 1), (0x10 << 12) | (DST_ROW_REV2 + 1) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(4): [65, 67, 69, 71, 73, 75, 77, 79]
//                       [65, 67, 69, 71, 73, 75, 77, 79]
vmem_schedules[4+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4, SRC_ROW_REV+0, SRC_ROW_REV+4 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 2), (0x2 << 12) | (DST_ROW_REV2 + 2), (0x3 << 12) | (DST_ROW_REV2 + 2), (0x4 << 12) | (DST_ROW_REV2 + 2), (0x5 << 12) | (DST_ROW_REV2 + 2), (0x6 << 12) | (DST_ROW_REV2 + 2), (0x7 << 12) | (DST_ROW_REV2 + 2), (0x8 << 12) | (DST_ROW_REV2 + 2), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(5): [81, 83, 85, 87, 89, 91, 93, 95]
//                       [81, 83, 85, 87, 89, 91, 93, 95]
vmem_schedules[5+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5, SRC_ROW_REV+0, SRC_ROW_REV+5 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 2), (0xa << 12) | (DST_ROW_REV2 + 2), (0xb << 12) | (DST_ROW_REV2 + 2), (0xc << 12) | (DST_ROW_REV2 + 2), (0xd << 12) | (DST_ROW_REV2 + 2), (0xe << 12) | (DST_ROW_REV2 + 2), (0xf << 12) | (DST_ROW_REV2 + 2), (0x10 << 12) | (DST_ROW_REV2 + 2) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(6): [97, 99, 101, 103, 105, 107, 109, 111]
//                       [97, 99, 101, 103, 105, 107, 109, 111]
vmem_schedules[6+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6, SRC_ROW_REV+0, SRC_ROW_REV+6 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 3), (0x2 << 12) | (DST_ROW_REV2 + 3), (0x3 << 12) | (DST_ROW_REV2 + 3), (0x4 << 12) | (DST_ROW_REV2 + 3), (0x5 << 12) | (DST_ROW_REV2 + 3), (0x6 << 12) | (DST_ROW_REV2 + 3), (0x7 << 12) | (DST_ROW_REV2 + 3), (0x8 << 12) | (DST_ROW_REV2 + 3), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(7): [113, 115, 117, 119, 121, 123, 125, 127]
//                       [113, 115, 117, 119, 121, 123, 125, 127]
vmem_schedules[7+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7, SRC_ROW_REV+0, SRC_ROW_REV+7 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 3), (0xa << 12) | (DST_ROW_REV2 + 3), (0xb << 12) | (DST_ROW_REV2 + 3), (0xc << 12) | (DST_ROW_REV2 + 3), (0xd << 12) | (DST_ROW_REV2 + 3), (0xe << 12) | (DST_ROW_REV2 + 3), (0xf << 12) | (DST_ROW_REV2 + 3), (0x10 << 12) | (DST_ROW_REV2 + 3) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(8): [129, 131, 133, 135, 137, 139, 141, 143]
//                       [129, 131, 133, 135, 137, 139, 141, 143]
vmem_schedules[8+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8, SRC_ROW_REV+0, SRC_ROW_REV+8 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 4), (0x2 << 12) | (DST_ROW_REV2 + 4), (0x3 << 12) | (DST_ROW_REV2 + 4), (0x4 << 12) | (DST_ROW_REV2 + 4), (0x5 << 12) | (DST_ROW_REV2 + 4), (0x6 << 12) | (DST_ROW_REV2 + 4), (0x7 << 12) | (DST_ROW_REV2 + 4), (0x8 << 12) | (DST_ROW_REV2 + 4), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(9): [145, 147, 149, 151, 153, 155, 157, 159]
//                       [145, 147, 149, 151, 153, 155, 157, 159]
vmem_schedules[9+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9, SRC_ROW_REV+0, SRC_ROW_REV+9 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 4), (0xa << 12) | (DST_ROW_REV2 + 4), (0xb << 12) | (DST_ROW_REV2 + 4), (0xc << 12) | (DST_ROW_REV2 + 4), (0xd << 12) | (DST_ROW_REV2 + 4), (0xe << 12) | (DST_ROW_REV2 + 4), (0xf << 12) | (DST_ROW_REV2 + 4), (0x10 << 12) | (DST_ROW_REV2 + 4) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(10): [161, 163, 165, 167, 169, 171, 173, 175]
//                        [161, 163, 165, 167, 169, 171, 173, 175]
vmem_schedules[10+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10, SRC_ROW_REV+0, SRC_ROW_REV+10 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 5), (0x2 << 12) | (DST_ROW_REV2 + 5), (0x3 << 12) | (DST_ROW_REV2 + 5), (0x4 << 12) | (DST_ROW_REV2 + 5), (0x5 << 12) | (DST_ROW_REV2 + 5), (0x6 << 12) | (DST_ROW_REV2 + 5), (0x7 << 12) | (DST_ROW_REV2 + 5), (0x8 << 12) | (DST_ROW_REV2 + 5), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(11): [177, 179, 181, 183, 185, 187, 189, 191]
//                        [177, 179, 181, 183, 185, 187, 189, 191]
vmem_schedules[11+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11, SRC_ROW_REV+0, SRC_ROW_REV+11 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 5), (0xa << 12) | (DST_ROW_REV2 + 5), (0xb << 12) | (DST_ROW_REV2 + 5), (0xc << 12) | (DST_ROW_REV2 + 5), (0xd << 12) | (DST_ROW_REV2 + 5), (0xe << 12) | (DST_ROW_REV2 + 5), (0xf << 12) | (DST_ROW_REV2 + 5), (0x10 << 12) | (DST_ROW_REV2 + 5) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(12): [193, 195, 197, 199, 201, 203, 205, 207]
//                        [193, 195, 197, 199, 201, 203, 205, 207]
vmem_schedules[12+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12, SRC_ROW_REV+0, SRC_ROW_REV+12 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 6), (0x2 << 12) | (DST_ROW_REV2 + 6), (0x3 << 12) | (DST_ROW_REV2 + 6), (0x4 << 12) | (DST_ROW_REV2 + 6), (0x5 << 12) | (DST_ROW_REV2 + 6), (0x6 << 12) | (DST_ROW_REV2 + 6), (0x7 << 12) | (DST_ROW_REV2 + 6), (0x8 << 12) | (DST_ROW_REV2 + 6), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(13): [209, 211, 213, 215, 217, 219, 221, 223]
//                        [209, 211, 213, 215, 217, 219, 221, 223]
vmem_schedules[13+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13, SRC_ROW_REV+0, SRC_ROW_REV+13 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 6), (0xa << 12) | (DST_ROW_REV2 + 6), (0xb << 12) | (DST_ROW_REV2 + 6), (0xc << 12) | (DST_ROW_REV2 + 6), (0xd << 12) | (DST_ROW_REV2 + 6), (0xe << 12) | (DST_ROW_REV2 + 6), (0xf << 12) | (DST_ROW_REV2 + 6), (0x10 << 12) | (DST_ROW_REV2 + 6) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(14): [225, 227, 229, 231, 233, 235, 237, 239]
//                        [225, 227, 229, 231, 233, 235, 237, 239]
vmem_schedules[14+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14, SRC_ROW_REV+0, SRC_ROW_REV+14 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 7), (0x2 << 12) | (DST_ROW_REV2 + 7), (0x3 << 12) | (DST_ROW_REV2 + 7), (0x4 << 12) | (DST_ROW_REV2 + 7), (0x5 << 12) | (DST_ROW_REV2 + 7), (0x6 << 12) | (DST_ROW_REV2 + 7), (0x7 << 12) | (DST_ROW_REV2 + 7), (0x8 << 12) | (DST_ROW_REV2 + 7), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(15): [241, 243, 245, 247, 249, 251, 253, 255]
//                        [241, 243, 245, 247, 249, 251, 253, 255]
vmem_schedules[15+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15, SRC_ROW_REV+0, SRC_ROW_REV+15 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 7), (0xa << 12) | (DST_ROW_REV2 + 7), (0xb << 12) | (DST_ROW_REV2 + 7), (0xc << 12) | (DST_ROW_REV2 + 7), (0xd << 12) | (DST_ROW_REV2 + 7), (0xe << 12) | (DST_ROW_REV2 + 7), (0xf << 12) | (DST_ROW_REV2 + 7), (0x10 << 12) | (DST_ROW_REV2 + 7) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(16): [257, 259, 261, 263, 265, 267, 269, 271]
//                        [257, 259, 261, 263, 265, 267, 269, 271]
vmem_schedules[16+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16, SRC_ROW_REV+0, SRC_ROW_REV+16 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 8), (0x2 << 12) | (DST_ROW_REV2 + 8), (0x3 << 12) | (DST_ROW_REV2 + 8), (0x4 << 12) | (DST_ROW_REV2 + 8), (0x5 << 12) | (DST_ROW_REV2 + 8), (0x6 << 12) | (DST_ROW_REV2 + 8), (0x7 << 12) | (DST_ROW_REV2 + 8), (0x8 << 12) | (DST_ROW_REV2 + 8), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(17): [273, 275, 277, 279, 281, 283, 285, 287]
//                        [273, 275, 277, 279, 281, 283, 285, 287]
vmem_schedules[17+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17, SRC_ROW_REV+0, SRC_ROW_REV+17 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 8), (0xa << 12) | (DST_ROW_REV2 + 8), (0xb << 12) | (DST_ROW_REV2 + 8), (0xc << 12) | (DST_ROW_REV2 + 8), (0xd << 12) | (DST_ROW_REV2 + 8), (0xe << 12) | (DST_ROW_REV2 + 8), (0xf << 12) | (DST_ROW_REV2 + 8), (0x10 << 12) | (DST_ROW_REV2 + 8) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(18): [289, 291, 293, 295, 297, 299, 301, 303]
//                        [289, 291, 293, 295, 297, 299, 301, 303]
vmem_schedules[18+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18, SRC_ROW_REV+0, SRC_ROW_REV+18 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 9), (0x2 << 12) | (DST_ROW_REV2 + 9), (0x3 << 12) | (DST_ROW_REV2 + 9), (0x4 << 12) | (DST_ROW_REV2 + 9), (0x5 << 12) | (DST_ROW_REV2 + 9), (0x6 << 12) | (DST_ROW_REV2 + 9), (0x7 << 12) | (DST_ROW_REV2 + 9), (0x8 << 12) | (DST_ROW_REV2 + 9), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(19): [305, 307, 309, 311, 313, 315, 317, 319]
//                        [305, 307, 309, 311, 313, 315, 317, 319]
vmem_schedules[19+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19, SRC_ROW_REV+0, SRC_ROW_REV+19 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 9), (0xa << 12) | (DST_ROW_REV2 + 9), (0xb << 12) | (DST_ROW_REV2 + 9), (0xc << 12) | (DST_ROW_REV2 + 9), (0xd << 12) | (DST_ROW_REV2 + 9), (0xe << 12) | (DST_ROW_REV2 + 9), (0xf << 12) | (DST_ROW_REV2 + 9), (0x10 << 12) | (DST_ROW_REV2 + 9) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(20): [321, 323, 325, 327, 329, 331, 333, 335]
//                        [321, 323, 325, 327, 329, 331, 333, 335]
vmem_schedules[20+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20, SRC_ROW_REV+0, SRC_ROW_REV+20 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 10), (0x2 << 12) | (DST_ROW_REV2 + 10), (0x3 << 12) | (DST_ROW_REV2 + 10), (0x4 << 12) | (DST_ROW_REV2 + 10), (0x5 << 12) | (DST_ROW_REV2 + 10), (0x6 << 12) | (DST_ROW_REV2 + 10), (0x7 << 12) | (DST_ROW_REV2 + 10), (0x8 << 12) | (DST_ROW_REV2 + 10), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(21): [337, 339, 341, 343, 345, 347, 349, 351]
//                        [337, 339, 341, 343, 345, 347, 349, 351]
vmem_schedules[21+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21, SRC_ROW_REV+0, SRC_ROW_REV+21 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 10), (0xa << 12) | (DST_ROW_REV2 + 10), (0xb << 12) | (DST_ROW_REV2 + 10), (0xc << 12) | (DST_ROW_REV2 + 10), (0xd << 12) | (DST_ROW_REV2 + 10), (0xe << 12) | (DST_ROW_REV2 + 10), (0xf << 12) | (DST_ROW_REV2 + 10), (0x10 << 12) | (DST_ROW_REV2 + 10) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(22): [353, 355, 357, 359, 361, 363, 365, 367]
//                        [353, 355, 357, 359, 361, 363, 365, 367]
vmem_schedules[22+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22, SRC_ROW_REV+0, SRC_ROW_REV+22 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 11), (0x2 << 12) | (DST_ROW_REV2 + 11), (0x3 << 12) | (DST_ROW_REV2 + 11), (0x4 << 12) | (DST_ROW_REV2 + 11), (0x5 << 12) | (DST_ROW_REV2 + 11), (0x6 << 12) | (DST_ROW_REV2 + 11), (0x7 << 12) | (DST_ROW_REV2 + 11), (0x8 << 12) | (DST_ROW_REV2 + 11), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(23): [369, 371, 373, 375, 377, 379, 381, 383]
//                        [369, 371, 373, 375, 377, 379, 381, 383]
vmem_schedules[23+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23, SRC_ROW_REV+0, SRC_ROW_REV+23 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 11), (0xa << 12) | (DST_ROW_REV2 + 11), (0xb << 12) | (DST_ROW_REV2 + 11), (0xc << 12) | (DST_ROW_REV2 + 11), (0xd << 12) | (DST_ROW_REV2 + 11), (0xe << 12) | (DST_ROW_REV2 + 11), (0xf << 12) | (DST_ROW_REV2 + 11), (0x10 << 12) | (DST_ROW_REV2 + 11) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(24): [385, 387, 389, 391, 393, 395, 397, 399]
//                        [385, 387, 389, 391, 393, 395, 397, 399]
vmem_schedules[24+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24, SRC_ROW_REV+0, SRC_ROW_REV+24 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 12), (0x2 << 12) | (DST_ROW_REV2 + 12), (0x3 << 12) | (DST_ROW_REV2 + 12), (0x4 << 12) | (DST_ROW_REV2 + 12), (0x5 << 12) | (DST_ROW_REV2 + 12), (0x6 << 12) | (DST_ROW_REV2 + 12), (0x7 << 12) | (DST_ROW_REV2 + 12), (0x8 << 12) | (DST_ROW_REV2 + 12), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(25): [625, 627, 629, 631, 633, 635, 637, 639]
//                        [625, 627, 629, 631, 633, 635, 637, 639]
vmem_schedules[25+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39, SRC_ROW_REV+0, SRC_ROW_REV+39 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 12), (0xa << 12) | (DST_ROW_REV2 + 12), (0xb << 12) | (DST_ROW_REV2 + 12), (0xc << 12) | (DST_ROW_REV2 + 12), (0xd << 12) | (DST_ROW_REV2 + 12), (0xe << 12) | (DST_ROW_REV2 + 12), (0xf << 12) | (DST_ROW_REV2 + 12), (0x10 << 12) | (DST_ROW_REV2 + 12) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(26): [641, 643, 645, 647, 649, 651, 653, 655]
//                        [641, 643, 645, 647, 649, 651, 653, 655]
vmem_schedules[26+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40, SRC_ROW_REV+0, SRC_ROW_REV+40 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 13), (0x2 << 12) | (DST_ROW_REV2 + 13), (0x3 << 12) | (DST_ROW_REV2 + 13), (0x4 << 12) | (DST_ROW_REV2 + 13), (0x5 << 12) | (DST_ROW_REV2 + 13), (0x6 << 12) | (DST_ROW_REV2 + 13), (0x7 << 12) | (DST_ROW_REV2 + 13), (0x8 << 12) | (DST_ROW_REV2 + 13), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(27): [657, 659, 661, 663, 665, 667, 669, 671]
//                        [657, 659, 661, 663, 665, 667, 669, 671]
vmem_schedules[27+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41, SRC_ROW_REV+0, SRC_ROW_REV+41 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 13), (0xa << 12) | (DST_ROW_REV2 + 13), (0xb << 12) | (DST_ROW_REV2 + 13), (0xc << 12) | (DST_ROW_REV2 + 13), (0xd << 12) | (DST_ROW_REV2 + 13), (0xe << 12) | (DST_ROW_REV2 + 13), (0xf << 12) | (DST_ROW_REV2 + 13), (0x10 << 12) | (DST_ROW_REV2 + 13) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(28): [673, 675, 677, 679, 681, 683, 685, 687]
//                        [673, 675, 677, 679, 681, 683, 685, 687]
vmem_schedules[28+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42, SRC_ROW_REV+0, SRC_ROW_REV+42 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 14), (0x2 << 12) | (DST_ROW_REV2 + 14), (0x3 << 12) | (DST_ROW_REV2 + 14), (0x4 << 12) | (DST_ROW_REV2 + 14), (0x5 << 12) | (DST_ROW_REV2 + 14), (0x6 << 12) | (DST_ROW_REV2 + 14), (0x7 << 12) | (DST_ROW_REV2 + 14), (0x8 << 12) | (DST_ROW_REV2 + 14), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(29): [689, 691, 693, 695, 697, 699, 701, 703]
//                        [689, 691, 693, 695, 697, 699, 701, 703]
vmem_schedules[29+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43, SRC_ROW_REV+0, SRC_ROW_REV+43 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 14), (0xa << 12) | (DST_ROW_REV2 + 14), (0xb << 12) | (DST_ROW_REV2 + 14), (0xc << 12) | (DST_ROW_REV2 + 14), (0xd << 12) | (DST_ROW_REV2 + 14), (0xe << 12) | (DST_ROW_REV2 + 14), (0xf << 12) | (DST_ROW_REV2 + 14), (0x10 << 12) | (DST_ROW_REV2 + 14) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(30): [705, 707, 709, 711, 713, 715, 717, 719]
//                        [705, 707, 709, 711, 713, 715, 717, 719]
vmem_schedules[30+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44, SRC_ROW_REV+0, SRC_ROW_REV+44 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 15), (0x2 << 12) | (DST_ROW_REV2 + 15), (0x3 << 12) | (DST_ROW_REV2 + 15), (0x4 << 12) | (DST_ROW_REV2 + 15), (0x5 << 12) | (DST_ROW_REV2 + 15), (0x6 << 12) | (DST_ROW_REV2 + 15), (0x7 << 12) | (DST_ROW_REV2 + 15), (0x8 << 12) | (DST_ROW_REV2 + 15), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(31): [721, 723, 725, 727, 729, 731, 733, 735]
//                        [721, 723, 725, 727, 729, 731, 733, 735]
vmem_schedules[31+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45, SRC_ROW_REV+0, SRC_ROW_REV+45 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 15), (0xa << 12) | (DST_ROW_REV2 + 15), (0xb << 12) | (DST_ROW_REV2 + 15), (0xc << 12) | (DST_ROW_REV2 + 15), (0xd << 12) | (DST_ROW_REV2 + 15), (0xe << 12) | (DST_ROW_REV2 + 15), (0xf << 12) | (DST_ROW_REV2 + 15), (0x10 << 12) | (DST_ROW_REV2 + 15) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(32): [737, 739, 741, 743, 745, 747, 749, 751]
//                        [737, 739, 741, 743, 745, 747, 749, 751]
vmem_schedules[32+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46, SRC_ROW_REV+0, SRC_ROW_REV+46 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 16), (0x2 << 12) | (DST_ROW_REV2 + 16), (0x3 << 12) | (DST_ROW_REV2 + 16), (0x4 << 12) | (DST_ROW_REV2 + 16), (0x5 << 12) | (DST_ROW_REV2 + 16), (0x6 << 12) | (DST_ROW_REV2 + 16), (0x7 << 12) | (DST_ROW_REV2 + 16), (0x8 << 12) | (DST_ROW_REV2 + 16), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(33): [753, 755, 757, 759, 761, 763, 765, 767]
//                        [753, 755, 757, 759, 761, 763, 765, 767]
vmem_schedules[33+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47, SRC_ROW_REV+0, SRC_ROW_REV+47 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 16), (0xa << 12) | (DST_ROW_REV2 + 16), (0xb << 12) | (DST_ROW_REV2 + 16), (0xc << 12) | (DST_ROW_REV2 + 16), (0xd << 12) | (DST_ROW_REV2 + 16), (0xe << 12) | (DST_ROW_REV2 + 16), (0xf << 12) | (DST_ROW_REV2 + 16), (0x10 << 12) | (DST_ROW_REV2 + 16) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(34): [769, 771, 773, 775, 777, 779, 781, 783]
//                        [769, 771, 773, 775, 777, 779, 781, 783]
vmem_schedules[34+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48, SRC_ROW_REV+0, SRC_ROW_REV+48 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 17), (0x2 << 12) | (DST_ROW_REV2 + 17), (0x3 << 12) | (DST_ROW_REV2 + 17), (0x4 << 12) | (DST_ROW_REV2 + 17), (0x5 << 12) | (DST_ROW_REV2 + 17), (0x6 << 12) | (DST_ROW_REV2 + 17), (0x7 << 12) | (DST_ROW_REV2 + 17), (0x8 << 12) | (DST_ROW_REV2 + 17), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(35): [785, 787, 789, 791, 793, 795, 797, 799]
//                        [785, 787, 789, 791, 793, 795, 797, 799]
vmem_schedules[35+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49, SRC_ROW_REV+0, SRC_ROW_REV+49 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 17), (0xa << 12) | (DST_ROW_REV2 + 17), (0xb << 12) | (DST_ROW_REV2 + 17), (0xc << 12) | (DST_ROW_REV2 + 17), (0xd << 12) | (DST_ROW_REV2 + 17), (0xe << 12) | (DST_ROW_REV2 + 17), (0xf << 12) | (DST_ROW_REV2 + 17), (0x10 << 12) | (DST_ROW_REV2 + 17) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(36): [801, 803, 805, 807, 809, 811, 813, 815]
//                        [801, 803, 805, 807, 809, 811, 813, 815]
vmem_schedules[36+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50, SRC_ROW_REV+0, SRC_ROW_REV+50 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 18), (0x2 << 12) | (DST_ROW_REV2 + 18), (0x3 << 12) | (DST_ROW_REV2 + 18), (0x4 << 12) | (DST_ROW_REV2 + 18), (0x5 << 12) | (DST_ROW_REV2 + 18), (0x6 << 12) | (DST_ROW_REV2 + 18), (0x7 << 12) | (DST_ROW_REV2 + 18), (0x8 << 12) | (DST_ROW_REV2 + 18), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(37): [817, 819, 821, 823, 825, 827, 829, 831]
//                        [817, 819, 821, 823, 825, 827, 829, 831]
vmem_schedules[37+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51, SRC_ROW_REV+0, SRC_ROW_REV+51 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 18), (0xa << 12) | (DST_ROW_REV2 + 18), (0xb << 12) | (DST_ROW_REV2 + 18), (0xc << 12) | (DST_ROW_REV2 + 18), (0xd << 12) | (DST_ROW_REV2 + 18), (0xe << 12) | (DST_ROW_REV2 + 18), (0xf << 12) | (DST_ROW_REV2 + 18), (0x10 << 12) | (DST_ROW_REV2 + 18) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(38): [833, 835, 837, 839, 841, 843, 845, 847]
//                        [833, 835, 837, 839, 841, 843, 845, 847]
vmem_schedules[38+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52, SRC_ROW_REV+0, SRC_ROW_REV+52 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 19), (0x2 << 12) | (DST_ROW_REV2 + 19), (0x3 << 12) | (DST_ROW_REV2 + 19), (0x4 << 12) | (DST_ROW_REV2 + 19), (0x5 << 12) | (DST_ROW_REV2 + 19), (0x6 << 12) | (DST_ROW_REV2 + 19), (0x7 << 12) | (DST_ROW_REV2 + 19), (0x8 << 12) | (DST_ROW_REV2 + 19), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(39): [849, 851, 853, 855, 857, 859, 861, 863]
//                        [849, 851, 853, 855, 857, 859, 861, 863]
vmem_schedules[39+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53, SRC_ROW_REV+0, SRC_ROW_REV+53 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 19), (0xa << 12) | (DST_ROW_REV2 + 19), (0xb << 12) | (DST_ROW_REV2 + 19), (0xc << 12) | (DST_ROW_REV2 + 19), (0xd << 12) | (DST_ROW_REV2 + 19), (0xe << 12) | (DST_ROW_REV2 + 19), (0xf << 12) | (DST_ROW_REV2 + 19), (0x10 << 12) | (DST_ROW_REV2 + 19) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(40): [865, 867, 869, 871, 873, 875, 877, 879]
//                        [865, 867, 869, 871, 873, 875, 877, 879]
vmem_schedules[40+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54, SRC_ROW_REV+0, SRC_ROW_REV+54 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 20), (0x2 << 12) | (DST_ROW_REV2 + 20), (0x3 << 12) | (DST_ROW_REV2 + 20), (0x4 << 12) | (DST_ROW_REV2 + 20), (0x5 << 12) | (DST_ROW_REV2 + 20), (0x6 << 12) | (DST_ROW_REV2 + 20), (0x7 << 12) | (DST_ROW_REV2 + 20), (0x8 << 12) | (DST_ROW_REV2 + 20), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(41): [881, 883, 885, 887, 889, 891, 893, 895]
//                        [881, 883, 885, 887, 889, 891, 893, 895]
vmem_schedules[41+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55, SRC_ROW_REV+0, SRC_ROW_REV+55 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 20), (0xa << 12) | (DST_ROW_REV2 + 20), (0xb << 12) | (DST_ROW_REV2 + 20), (0xc << 12) | (DST_ROW_REV2 + 20), (0xd << 12) | (DST_ROW_REV2 + 20), (0xe << 12) | (DST_ROW_REV2 + 20), (0xf << 12) | (DST_ROW_REV2 + 20), (0x10 << 12) | (DST_ROW_REV2 + 20) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(42): [897, 899, 901, 903, 905, 907, 909, 911]
//                        [897, 899, 901, 903, 905, 907, 909, 911]
vmem_schedules[42+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56, SRC_ROW_REV+0, SRC_ROW_REV+56 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 21), (0x2 << 12) | (DST_ROW_REV2 + 21), (0x3 << 12) | (DST_ROW_REV2 + 21), (0x4 << 12) | (DST_ROW_REV2 + 21), (0x5 << 12) | (DST_ROW_REV2 + 21), (0x6 << 12) | (DST_ROW_REV2 + 21), (0x7 << 12) | (DST_ROW_REV2 + 21), (0x8 << 12) | (DST_ROW_REV2 + 21), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(43): [913, 915, 917, 919, 921, 923, 925, 927]
//                        [913, 915, 917, 919, 921, 923, 925, 927]
vmem_schedules[43+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57, SRC_ROW_REV+0, SRC_ROW_REV+57 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 21), (0xa << 12) | (DST_ROW_REV2 + 21), (0xb << 12) | (DST_ROW_REV2 + 21), (0xc << 12) | (DST_ROW_REV2 + 21), (0xd << 12) | (DST_ROW_REV2 + 21), (0xe << 12) | (DST_ROW_REV2 + 21), (0xf << 12) | (DST_ROW_REV2 + 21), (0x10 << 12) | (DST_ROW_REV2 + 21) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(44): [929, 931, 933, 935, 937, 939, 941, 943]
//                        [929, 931, 933, 935, 937, 939, 941, 943]
vmem_schedules[44+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58, SRC_ROW_REV+0, SRC_ROW_REV+58 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 22), (0x2 << 12) | (DST_ROW_REV2 + 22), (0x3 << 12) | (DST_ROW_REV2 + 22), (0x4 << 12) | (DST_ROW_REV2 + 22), (0x5 << 12) | (DST_ROW_REV2 + 22), (0x6 << 12) | (DST_ROW_REV2 + 22), (0x7 << 12) | (DST_ROW_REV2 + 22), (0x8 << 12) | (DST_ROW_REV2 + 22), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(45): [945, 947, 949, 951, 953, 955, 957, 959]
//                        [945, 947, 949, 951, 953, 955, 957, 959]
vmem_schedules[45+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59, SRC_ROW_REV+0, SRC_ROW_REV+59 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 22), (0xa << 12) | (DST_ROW_REV2 + 22), (0xb << 12) | (DST_ROW_REV2 + 22), (0xc << 12) | (DST_ROW_REV2 + 22), (0xd << 12) | (DST_ROW_REV2 + 22), (0xe << 12) | (DST_ROW_REV2 + 22), (0xf << 12) | (DST_ROW_REV2 + 22), (0x10 << 12) | (DST_ROW_REV2 + 22) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(46): [961, 963, 965, 967, 969, 971, 973, 975]
//                        [961, 963, 965, 967, 969, 971, 973, 975]
vmem_schedules[46+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60, SRC_ROW_REV+0, SRC_ROW_REV+60 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 23), (0x2 << 12) | (DST_ROW_REV2 + 23), (0x3 << 12) | (DST_ROW_REV2 + 23), (0x4 << 12) | (DST_ROW_REV2 + 23), (0x5 << 12) | (DST_ROW_REV2 + 23), (0x6 << 12) | (DST_ROW_REV2 + 23), (0x7 << 12) | (DST_ROW_REV2 + 23), (0x8 << 12) | (DST_ROW_REV2 + 23), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(47): [977, 979, 981, 983, 985, 987, 989, 991]
//                        [977, 979, 981, 983, 985, 987, 989, 991]
vmem_schedules[47+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61, SRC_ROW_REV+0, SRC_ROW_REV+61 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 23), (0xa << 12) | (DST_ROW_REV2 + 23), (0xb << 12) | (DST_ROW_REV2 + 23), (0xc << 12) | (DST_ROW_REV2 + 23), (0xd << 12) | (DST_ROW_REV2 + 23), (0xe << 12) | (DST_ROW_REV2 + 23), (0xf << 12) | (DST_ROW_REV2 + 23), (0x10 << 12) | (DST_ROW_REV2 + 23) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(48): [993, 995, 997, 999, 1001, 1003, 1005, 1007]
//                        [993, 995, 997, 999, 1001, 1003, 1005, 1007]
vmem_schedules[48+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62, SRC_ROW_REV+0, SRC_ROW_REV+62 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (0x1 << 12) | (DST_ROW_REV2 + 24), (0x2 << 12) | (DST_ROW_REV2 + 24), (0x3 << 12) | (DST_ROW_REV2 + 24), (0x4 << 12) | (DST_ROW_REV2 + 24), (0x5 << 12) | (DST_ROW_REV2 + 24), (0x6 << 12) | (DST_ROW_REV2 + 24), (0x7 << 12) | (DST_ROW_REV2 + 24), (0x8 << 12) | (DST_ROW_REV2 + 24), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};
// Reverse for chunk(49): [1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023]
//                        [1009, 1011, 1013, 1015, 1017, 1019, 1021, 1023]
vmem_schedules[49+4] = (VmemSchedule) {
{ SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63, SRC_ROW_REV+0, SRC_ROW_REV+63 },
{ 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64 },
{ (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (GARBAGE_ROW), (0x9 << 12) | (DST_ROW_REV2 + 24), (0xa << 12) | (DST_ROW_REV2 + 24), (0xb << 12) | (DST_ROW_REV2 + 24), (0xc << 12) | (DST_ROW_REV2 + 24), (0xd << 12) | (DST_ROW_REV2 + 24), (0xe << 12) | (DST_ROW_REV2 + 24), (0xf << 12) | (DST_ROW_REV2 + 24), (0x10 << 12) | (DST_ROW_REV2 + 24) },
{ 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19 }
};

